// <auto-generated />
using System;
using AvaNews.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AvaNews.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    partial class NewsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AvaNews.Domain.Entities.NewsItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string[]>("Keywords")
                        .HasColumnType("text[]")
                        .HasColumnName("keywords");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.Property<DateTimeOffset>("PublishedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_utc");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string[]>("Tickers")
                        .HasColumnType("text[]")
                        .HasColumnName("tickers");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.HasIndex("PublishedUtc")
                        .HasDatabaseName("ix_news_published_desc");

                    b.HasIndex("Tickers");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Tickers"), "gin");

                    b.ToTable("news", (string)null);
                });

            modelBuilder.Entity("AvaNews.Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("QueryText")
                        .HasColumnType("text")
                        .HasColumnName("query_text");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<string>("Tickers")
                        .HasColumnType("jsonb")
                        .HasColumnName("tickers");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("AvaNews.Domain.Entities.NewsItem", b =>
                {
                    b.OwnsOne("AvaNews.Domain.Entities.NewsEnrichment", "Enrichment", b1 =>
                        {
                            b1.Property<Guid>("NewsItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("PrevClose")
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("enr_prev_close");

                            b1.Property<double>("PriceChangePct")
                                .HasColumnType("double precision")
                                .HasColumnName("enr_change_pct");

                            b1.Property<decimal>("PriceNow")
                                .HasColumnType("numeric(18,4)")
                                .HasColumnName("enr_price_now");

                            b1.Property<string>("Sentiment")
                                .HasColumnType("text")
                                .HasColumnName("enr_sentiment");

                            b1.HasKey("NewsItemId");

                            b1.ToTable("news");

                            b1.WithOwner()
                                .HasForeignKey("NewsItemId");
                        });

                    b.OwnsOne("AvaNews.Domain.Entities.PublisherInfo", "Publisher", b1 =>
                        {
                            b1.Property<Guid>("NewsItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("HomepageUrl")
                                .HasColumnType("text")
                                .HasColumnName("publisher_homepage_url");

                            b1.Property<string>("LogoUrl")
                                .HasColumnType("text")
                                .HasColumnName("publisher_logo_url");

                            b1.Property<string>("Name")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("publisher_name");

                            b1.HasKey("NewsItemId");

                            b1.ToTable("news");

                            b1.WithOwner()
                                .HasForeignKey("NewsItemId");
                        });

                    b.Navigation("Enrichment");

                    b.Navigation("Publisher");
                });
#pragma warning restore 612, 618
        }
    }
}
